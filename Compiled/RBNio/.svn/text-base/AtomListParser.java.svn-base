/* Generated By:JavaCC: Do not edit this line. AtomListParser.java */
package RBNio;
import RBNpackage.*;
import java.util.*;

public class AtomListParser implements AtomListParserConstants {
        /**
		 * @uml.property  name="parseno"
		 */
        private int parseno = 1;

// parse 1: find unary relations as candidate for types
// parse 2: construct domain and extensions of type relations 
// parse 3: construct typed probabilistic relations
  final public void readALFile(AtomListReader mr) throws ParseException {
AtomListReader myreader = mr;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Name:
      case Not:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Literal(myreader);
      label_2:
      while (true) {
        jj_consume_token(EOL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
      }
    }
  }

  final public void Literal(AtomListReader mr) throws ParseException {
 //variables
        Token tok;
        boolean positive=true;
        AtomListReader myreader = mr;
        int arity = 0;
        Rel newrel = new Rel();
        String relname ="";
        Vector<String> tupleargs = new Vector<String>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Not:
      jj_consume_token(Not);
                 positive=false;
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    tok = jj_consume_token(Name);
                switch (parseno){
                case 1:
                        relname = tok.image;
                        arity = 0;
                        break;
                case 2:
                        relname = tok.image;
                        arity = 0;
                        break;
                case 3:
                        relname = tok.image;
                        arity = 0;
                        break;
                case 4:
                        relname = tok.image;
                        arity = 0;
                        tupleargs = new Vector<String>();
                        break;


                }
    jj_consume_token(OpenPar);
    tok = jj_consume_token(Name);
                switch (parseno){
                case 1: arity++;
                        break;
                case 2:
                        myreader.addElement(tok.image,relname);
                        arity++;
                        break;
                case 3:
                        arity++;
                        tupleargs.add(tok.image);
                        break;
                case 4:
                        arity++;
                        tupleargs.add(tok.image);
                        break;
                }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 15:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(15);
      tok = jj_consume_token(Name);
                switch (parseno){
                case 1:
                        arity++;
                        break;
                case 2:
                        myreader.addElement(tok.image,relname);
                        arity++;
                        break;
                case 3:
                        arity++;
                        tupleargs.add(tok.image);
                        break;
                case 4:
                        arity++;
                        tupleargs.add(tok.image);
                        break;
                }
    }
    jj_consume_token(ClosePar);
                switch (parseno){
                case 1:
                        if (arity==1){
                                newrel = new Rel(relname,arity);
                                myreader.addCandidateType(newrel);
                        }
                        break;
                case 2:
                        break;
                case 3:
                        myreader.addRelation(relname,tupleargs);
                        break;
                case 4:
                        myreader.addTuple(relname,tupleargs,positive);
                }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EndLiteral:
      jj_consume_token(EndLiteral);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
  }

  final public void setParseNo(int i) throws ParseException {
         parseno = i;
  }

  /**
 * Generated Token Manager.
 * @uml.property  name="token_source"
 * @uml.associationEnd  multiplicity="(1 1)"
 */
  public AtomListParserTokenManager token_source;
  /**
 * @uml.property  name="jj_input_stream"
 * @uml.associationEnd  
 */
SimpleCharStream jj_input_stream;
  /**
 * Current token.
 * @uml.property  name="token"
 * @uml.associationEnd  multiplicity="(1 1)"
 */
  public Token token;
  /**
 * Next token.
 * @uml.property  name="jj_nt"
 * @uml.associationEnd  
 */
  public Token jj_nt;
  /**
 * @uml.property  name="jj_ntk"
 */
private int jj_ntk;
  /**
 * @uml.property  name="jj_gen"
 */
private int jj_gen;
  /**
 * @uml.property  name="jj_la1" multiplicity="(0 -1)" dimension="1"
 */
final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2100,0x80,0x2000,0x8000,0x4000,};
   }

  /** Constructor with InputStream. */
  public AtomListParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AtomListParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AtomListParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AtomListParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AtomListParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AtomListParser(AtomListParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AtomListParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  /**
 * @uml.property  name="jj_expentries"
 * @uml.associationEnd  multiplicity="(0 -1)" elementType="[I"
 */
private java.util.List jj_expentries = new java.util.ArrayList();
  /**
 * @uml.property  name="jj_expentry" multiplicity="(0 -1)" dimension="1"
 */
private int[] jj_expentry;
  /**
 * @uml.property  name="jj_kind"
 */
private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[16];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 16; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}

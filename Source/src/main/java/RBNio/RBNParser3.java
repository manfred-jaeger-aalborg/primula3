/* RBNParser3.java */
/* Generated By:JavaCC: Do not edit this line. RBNParser3.java */
package RBNio;

import PyManager.*;
import RBNpackage.*;
import java.util.*;
import myio.StringOps;
import RBNExceptions.*;
import RBNutilities.Pair;

public class RBNParser3 implements RBNParser3Constants {
        private int parseno = 1;
        private RBNReader3 reader;

  final public void ReadRBN() throws ParseException, RBNIllegalArgumentException {
    label_1:
    while (true) {
      if (jj_2_1(3)) {
        MacroDefinition();
      } else if (jj_2_2(3)) {
        ProbRelDefinition();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_3(3)) {
        ;
      } else {
        break label_1;
      }
    }
}

  final public void MacroDefinition() throws ParseException, RBNIllegalArgumentException {RBNReader3.ParsedTypedAtom parsedat;
 ProbForm parsedprobform;
    jj_consume_token(9);
    parsedat = TypedAtom(true);
    jj_consume_token(10);
    parsedprobform = ProbForm();
    jj_consume_token(11);
// Add the '@' back to the name:
        parsedat.set_relname("@"+parsedat.rel().name());
        switch  (parseno){
        case 1:
                reader.addMacroDefined(new RBNMacro(((BoolRel)parsedat.rel()),parsedat.args(),null));
                break;
        case 2:
                reader.setMacroPF(parsedat.rel(),parsedprobform);
        }
}

  final public void ProbRelDefinition() throws ParseException, RBNIllegalArgumentException {RBNReader3.ParsedTypedAtom parsedat;
 CPModel parsedcpm;
    // grammar
            parsedat = TypedAtom(false);
    jj_consume_token(10);
    parsedcpm = CPModel();
    jj_consume_token(11);
switch  (parseno){
                case 1:
                        reader.addProbRelDefined(new RBNPreldef(parsedat.rel(),parsedat.args(),parsedcpm));
                        break;
                case 2:
                reader.setProbRelPF(parsedat.rel(),parsedcpm);
        }
}

  final public CPModel CPModel() throws ParseException, RBNIllegalArgumentException {CPModel parsedcpm;
    if (jj_2_4(3)) {
      parsedcpm = CatSoftMax();
    } else if (jj_2_5(3)) {
      parsedcpm = ProbForm();
    } else if (jj_2_6(3)) {
      parsedcpm = CatGnn();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return parsedcpm;}
    throw new Error("Missing return statement in function");
}

  final public ProbForm ProbForm() throws ParseException, RBNIllegalArgumentException {ProbForm parsedpf;
    if (jj_2_7(2147483647)) {
      parsedpf = BoolCatEquality();
    } else if (jj_2_8(2147483647)) {
      parsedpf = BoolCatEquality();
    } else if (jj_2_9(2147483647)) {
      parsedpf = Atom();
    } else if (jj_2_10(2147483647)) {
      parsedpf = ConvCombination();
    } else if (jj_2_11(2147483647)) {
      parsedpf = CombinationFunc();
    } else if (jj_2_12(3)) {
      parsedpf = BoolFormula();
    } else if (jj_2_13(3)) {
      parsedpf = MacroCall();
    } else if (jj_2_14(3)) {
      parsedpf = Constant();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return parsedpf;}
    throw new Error("Missing return statement in function");
}

  final public RBNReader3.ParsedUnTypedAtom UntypedAtom(boolean ismacro) throws ParseException, RBNIllegalArgumentException {Vector<String> args;
  Token tok;
  Rel rel;
    // grammar
            tok = jj_consume_token(Name);
    args = UntypedArguments();
{if ("" != null) return reader.new ParsedUnTypedAtom(tok.image,args,ismacro);}
    throw new Error("Missing return statement in function");
}

  final public RBNReader3.ParsedTypedAtom TypedAtom(boolean ismacro) throws ParseException, RBNIllegalArgumentException {Token tok;
        RBNReader3.ParsedTypedArguments args;
        int arity;
        String relname;
    // grammar
            tok = jj_consume_token(Name);
relname = tok.image;
    args = TypedArguments();
arity = args.arity();
         {if ("" != null) return  reader.new ParsedTypedAtom(relname,args,ismacro);}
    throw new Error("Missing return statement in function");
}

  final public Vector<String> UntypedArguments() throws ParseException {Vector<String> parsedargs;
    jj_consume_token(12);
    parsedargs = ArgList();
    jj_consume_token(13);
{if ("" != null) return parsedargs;}
    throw new Error("Missing return statement in function");
}

  final public Vector<String> ArgList() throws ParseException {Vector<String> parsedargs = new Vector<String>();
 Token tok;
    if (jj_2_16(3)) {
      tok = jj_consume_token(Name);
parsedargs.add(tok.image);
      label_2:
      while (true) {
        if (jj_2_15(3)) {
          ;
        } else {
          break label_2;
        }
        jj_consume_token(14);
        tok = jj_consume_token(Name);
parsedargs.add(tok.image);
      }
    } else {
      ;
    }
{if ("" != null) return parsedargs;}
    throw new Error("Missing return statement in function");
}

  final public RBNReader3.ParsedTypedArguments TypedArguments() throws ParseException {Token tok;
        Vector<String> args = new Vector<String>();
        Vector<Type> types = new Vector<Type>();
        String typestr = null;
    jj_consume_token(12);
    if (jj_2_20(3)) {
      if (jj_2_17(3)) {
        typestr = TypeDeclaration();
      } else {
        ;
      }
if (typestr != null)
                        {types.add(new TypeRel(typestr));
                         typestr = null;
                        }
                  else {types.add(new TypeDomain());}
      tok = jj_consume_token(Name);
args.add(tok.image);
      label_3:
      while (true) {
        if (jj_2_18(3)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(14);
        if (jj_2_19(3)) {
          typestr = TypeDeclaration();
        } else {
          ;
        }
if (typestr != null)
                        {types.add(new TypeRel(typestr));
                         typestr = null;
                        }
                  else {types.add(new TypeDomain());}
        tok = jj_consume_token(Name);
args.add(tok.image);
      }
    } else {
      ;
    }
    jj_consume_token(13);
{if ("" != null) return reader.new ParsedTypedArguments(types,args);}
    throw new Error("Missing return statement in function");
}

  final public String TypeDeclaration() throws ParseException {Token tok;
    jj_consume_token(15);
    tok = jj_consume_token(Name);
    jj_consume_token(16);
{if ("" != null) return tok.image;}
    throw new Error("Missing return statement in function");
}

  final public ProbForm Constant() throws ParseException {ProbForm parsedpf;
    if (jj_2_21(3)) {
      parsedpf = NumericConstant();
    } else if (jj_2_22(3)) {
      parsedpf = Parameter();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return parsedpf;}
    throw new Error("Missing return statement in function");
}

  final public ProbFormConstant NumericConstant() throws ParseException {ProbFormConstant parsedpfconst;
 Token tok;
    if (jj_2_23(3)) {
      tok = jj_consume_token(NonNegNumber);
parsedpfconst = new ProbFormConstant(Double.parseDouble(tok.image));
    } else if (jj_2_24(3)) {
      jj_consume_token(MINUS);
      tok = jj_consume_token(NonNegNumber);
parsedpfconst = new ProbFormConstant(-Double.parseDouble(tok.image));
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return parsedpfconst;}
    throw new Error("Missing return statement in function");
}

  final public ProbFormConstant Parameter() throws ParseException {ProbFormConstant parsedpfconst;
 Token tok;
    if (jj_2_25(3)) {
      jj_consume_token(17);
      tok = jj_consume_token(Name);
{if ("" != null) return new ProbFormConstant("#" + tok.image);}
    } else if (jj_2_26(3)) {
      jj_consume_token(18);
      tok = jj_consume_token(Name);
{if ("" != null) return new ProbFormConstant("$" + tok.image);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public ProbForm Atom() throws ParseException, RBNIllegalArgumentException {ProbFormAtom parsedpfatom;
 RBNReader3.ParsedUnTypedAtom parsedutat;
 Rel parsedrel;
 Rel oldrel;
    // grammar
            parsedutat = UntypedAtom(false);
switch(parseno){
        case 1:
                reader.addAllRel(parsedutat.rel());
                {if ("" != null) return null;}
                break;
        case 2:
                parsedrel = parsedutat.rel();
                // first need to look into reader.probrelsdefined in order
                // to ensure that the relation associated with the atom
                // is of type probabilistic
                oldrel = reader.getProbRel(parsedrel);
                // if the following case triggers, then the relation
                // associated with the atom will be predefined
                if (oldrel == null)
                    oldrel = reader.getAllRel(parsedrel);
                {if ("" != null) return new ProbFormAtom(oldrel,parsedutat.args());}
//	 	if (oldrel != null)
//		   return new ProbFormAtom(oldrel,StringOps.stringVectorToArray(parsedutat.args()));
//	 	else {
//		     oldrel = reader.getAllRel(parsedrel);
//		     return new ProbFormBoolAtom(oldrel,StringOps.stringVectorToArray(parsedutat.args()),true);
//		     }
        }
    throw new Error("Missing return statement in function");
}

  final public ProbFormConvComb ConvCombination() throws ParseException, RBNIllegalArgumentException {ProbFormConvComb pf;
    if (jj_2_27(3)) {
      pf = ConvCombinationClassic();
    } else if (jj_2_28(3)) {
      pf = ConvCombinationCherry();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
switch(parseno){
        case 1:
                {if ("" != null) return null;}
                break;
        case 2: {if ("" != null) return pf;}
        }
    throw new Error("Missing return statement in function");
}

  final public ProbFormConvComb ConvCombinationClassic() throws ParseException, RBNIllegalArgumentException {ProbForm pf1;
 ProbForm pf2;
 ProbForm pf3;
    jj_consume_token(12);
    pf1 = ProbForm();
    jj_consume_token(19);
    pf2 = ProbForm();
    jj_consume_token(14);
    pf3 = ProbForm();
    jj_consume_token(13);
switch(parseno){
        case 1:
                {if ("" != null) return null;}
                break;
        case 2: {if ("" != null) return new ProbFormConvComb(pf1,pf2,pf3);}
        }
    throw new Error("Missing return statement in function");
}

  final public ProbFormConvComb ConvCombinationCherry() throws ParseException, RBNIllegalArgumentException {ProbForm pf1;
 ProbForm pf2;
 ProbForm pf3;
    jj_consume_token(WIFWIF);
    pf1 = ProbForm();
    jj_consume_token(WIFTHEN);
    pf2 = ProbForm();
    jj_consume_token(WIFELSE);
    pf3 = ProbForm();
switch(parseno){
        case 1:
                {if ("" != null) return null;}
                break;
        case 2: {if ("" != null) return new ProbFormConvComb(pf1,pf2,pf3);}
        }
    throw new Error("Missing return statement in function");
}

  final public ProbFormCombFunc CombinationFunc() throws ParseException, RBNIllegalArgumentException {ProbFormCombFunc pf;
    if (jj_2_29(3)) {
      pf = CombinationFuncClassic();
    } else if (jj_2_30(3)) {
      pf = CombinationFuncCherry();
    } else if (jj_2_31(2147483647)) {
      pf = CombinationFuncSum();
    } else if (jj_2_32(2147483647)) {
      pf = CombinationFuncProd();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
switch(parseno){
        case 1:
                {if ("" != null) return null;}
                break;
        case 2: {if ("" != null) return pf;}
        }
    throw new Error("Missing return statement in function");
}

  final public ProbFormCombFunc CombinationFuncClassic() throws ParseException, RBNIllegalArgumentException {Token tok;
  Vector<ProbForm> pflist;
  Vector<String> arglist;
  ProbForm[] pfarr;
  ProbFormBool cc = new ProbFormBoolConstant(true);
    // grammar
            tok = jj_consume_token(CombinationFunction);
    jj_consume_token(20);
    pflist = ProbFormList();
    jj_consume_token(21);
    arglist = ArgList();
    jj_consume_token(19);
    if (jj_2_33(3)) {
      cc = BoolFormula();
    } else {
      ;
    }
    jj_consume_token(22);
switch(parseno){
        case 1:
                {if ("" != null) return null;}
                break;
        case 2:
         pfarr = new ProbForm[pflist.size()];
         for (int i=0;i<pfarr.length;i++)
                pfarr[i]=pflist.elementAt(i);
        {if ("" != null) return new ProbFormCombFunc(tok.image,pfarr,StringOps.stringVectorToArray(arglist),cc);}}
    throw new Error("Missing return statement in function");
}

  final public ProbFormCombFunc CombinationFuncCherry() throws ParseException, RBNIllegalArgumentException {Token tok;
  Vector<ProbForm> pflist;
  Vector<String> arglist = new Vector<String>();
  ProbForm[] pfarr;
  ProbFormBool cc = new ProbFormBoolConstant(true);
    jj_consume_token(COMBCOMB);
    pflist = ProbFormList();
    jj_consume_token(COMBWITH);
    tok = jj_consume_token(CombinationFunction);
    if (jj_2_34(3)) {
      jj_consume_token(COMBFORALL);
      arglist = ArgList();
      jj_consume_token(COMBWHERE);
      cc = BoolFormula();
    } else {
      ;
    }
switch(parseno){
        case 1:
                {if ("" != null) return null;}
                break;
        case 2:
         pfarr = new ProbForm[pflist.size()];
         for (int i=0;i<pfarr.length;i++)
                pfarr[i]=pflist.elementAt(i);
        {if ("" != null) return new ProbFormCombFunc(tok.image,pfarr,StringOps.stringVectorToArray(arglist),cc);}}
    throw new Error("Missing return statement in function");
}

  final public ProbFormCombFunc CombinationFuncProd() throws ParseException, RBNIllegalArgumentException {Vector<ProbForm> pflist = new Vector<ProbForm>();
ProbForm nextpf;
ProbForm[] pfarr;
    jj_consume_token(12);
    nextpf = ProbForm();
pflist.add(nextpf);
    label_4:
    while (true) {
      jj_consume_token(MULT);
      nextpf = ProbForm();
pflist.add(nextpf);
      if (jj_2_35(3)) {
        ;
      } else {
        break label_4;
      }
    }
    jj_consume_token(13);
switch(parseno){
        case 1:
                {if ("" != null) return null;}
                break;
        case 2:
         pfarr = new ProbForm[pflist.size()];
         for (int i=0;i<pfarr.length;i++)
                pfarr[i]=pflist.elementAt(i);
        {if ("" != null) return new ProbFormCombFunc("prod",pfarr,new String[0],new ProbFormBoolConstant(true));}}
    throw new Error("Missing return statement in function");
}

  final public ProbFormCombFunc CombinationFuncSum() throws ParseException, RBNIllegalArgumentException {Vector<ProbForm> pflist = new Vector<ProbForm>();
ProbForm nextpf;
ProbForm[] pfarr;
    jj_consume_token(12);
    nextpf = ProbForm();
pflist.add(nextpf);
    label_5:
    while (true) {
      if (jj_2_36(3)) {
        jj_consume_token(PLUS);
        nextpf = ProbForm();
pflist.add(nextpf);
      } else if (jj_2_37(3)) {
        jj_consume_token(MINUS);
        nextpf = ProbForm();
ProbForm[] pfl = new ProbForm[2];
           pfl[0]=new ProbFormConstant(-1);
           pfl[1]=nextpf;
           pflist.add(new ProbFormCombFunc("prod",pfl,new String[0],new ProbFormBoolConstant(true)));
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_38(3)) {
        ;
      } else {
        break label_5;
      }
    }
    jj_consume_token(13);
switch(parseno){
        case 1:
                {if ("" != null) return null;}
                break;
        case 2:
         pfarr = new ProbForm[pflist.size()];
         for (int i=0;i<pfarr.length;i++)
                pfarr[i]=pflist.elementAt(i);
        {if ("" != null) return new ProbFormCombFunc("sum",pfarr,new String[0],new ProbFormBoolConstant(true));}}
    throw new Error("Missing return statement in function");
}

  final public Vector<ProbForm> ProbFormList() throws ParseException, RBNIllegalArgumentException {Vector<ProbForm> pflist = new Vector<ProbForm>();
 ProbForm nextpf;
    if (jj_2_40(3)) {
      nextpf = ProbForm();
pflist.add(nextpf);
      label_6:
      while (true) {
        if (jj_2_39(3)) {
          ;
        } else {
          break label_6;
        }
        jj_consume_token(14);
        nextpf = ProbForm();
pflist.add(nextpf);
      }
    } else {
      ;
    }
{if ("" != null) return pflist;}
    throw new Error("Missing return statement in function");
}

  final public ProbFormBool BoolFormula() throws ParseException, RBNIllegalArgumentException {ProbFormBool pf;
    if (jj_2_41(2147483647)) {
      pf = BoolAtom();
    } else if (jj_2_42(2147483647)) {
      pf = BoolEquality();
    } else if (jj_2_43(3)) {
      pf = BoolNegation();
    } else if (jj_2_44(2147483647)) {
      pf = BoolAnd();
    } else if (jj_2_45(2147483647)) {
      pf = BoolOr();
    } else if (jj_2_46(3)) {
      pf = BoolConstant();
    } else if (jj_2_47(3)) {
      pf = BoolCatEquality();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return pf;}
    throw new Error("Missing return statement in function");
}

  final public ProbFormBoolAtom BoolAtom() throws ParseException, RBNIllegalArgumentException {RBNReader3.ParsedUnTypedAtom parsedat;
    // grammar
            parsedat = UntypedAtom(false);
{if ("" != null) return new ProbFormBoolAtom(parsedat.rel(),parsedat.args(),true);}
    throw new Error("Missing return statement in function");
}

  final public ProbFormBoolEquality BoolEquality() throws ParseException, RBNIllegalArgumentException {Token tok1;
 Token tok2;
    // grammar
            tok1 = jj_consume_token(Name);
    jj_consume_token(10);
    tok2 = jj_consume_token(Name);
{if ("" != null) return new ProbFormBoolEquality(tok1.image,tok2.image,true);}
    throw new Error("Missing return statement in function");
}

  final public ProbFormBoolAtomEquality BoolCatEquality() throws ParseException, RBNIllegalArgumentException {Object tok1;
 Object tok2;
    if (jj_2_48(3)) {
      tok1 = UntypedAtom(false);
    } else if (jj_2_49(3)) {
      tok1 = jj_consume_token(Name).image;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(10);
    if (jj_2_50(3)) {
      tok2 = UntypedAtom(false);
    } else if (jj_2_51(3)) {
      tok2 = jj_consume_token(Name).image;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
switch(parseno){
        case 1:
                {if ("" != null) return null;}
                break;
        case 2:
             if (tok1 instanceof RBNReader3.ParsedUnTypedAtom){
                tok1= new ProbFormAtom(((RBNReader3.ParsedUnTypedAtom)tok1).rel(),((RBNReader3.ParsedUnTypedAtom)tok1).args());
             }
             if (tok2 instanceof RBNReader3.ParsedUnTypedAtom){
                tok2= new ProbFormAtom(((RBNReader3.ParsedUnTypedAtom)tok2).rel(),((RBNReader3.ParsedUnTypedAtom)tok2).args());
             }
             {if ("" != null) return new ProbFormBoolAtomEquality(tok1,tok2,true,reader.getSig());}
             }
    throw new Error("Missing return statement in function");
}

  final public ProbFormBoolComposite BoolAnd() throws ParseException, RBNIllegalArgumentException {Vector<ProbFormBool> comps=new Vector<ProbFormBool>() ;
ProbFormBool nextpfb;
    jj_consume_token(12);
    nextpfb = BoolFormula();
comps.add(nextpfb);
    label_7:
    while (true) {
      jj_consume_token(23);
      nextpfb = BoolFormula();
comps.add(nextpfb);
      if (jj_2_52(3)) {
        ;
      } else {
        break label_7;
      }
    }
    jj_consume_token(13);
{if ("" != null) return new ProbFormBoolComposite(comps,ProbFormBool.OPERATORAND,true);}
    throw new Error("Missing return statement in function");
}

  final public ProbFormBoolComposite BoolOr() throws ParseException, RBNIllegalArgumentException {Vector<ProbFormBool> comps=new Vector<ProbFormBool>();
ProbFormBool nextpfb;
    jj_consume_token(12);
    nextpfb = BoolFormula();
comps.add(nextpfb);
    label_8:
    while (true) {
      jj_consume_token(21);
      nextpfb = BoolFormula();
comps.add(nextpfb);
      if (jj_2_53(3)) {
        ;
      } else {
        break label_8;
      }
    }
    jj_consume_token(13);
{if ("" != null) return new ProbFormBoolComposite(comps,ProbFormBool.OPERATOROR,true);}
    throw new Error("Missing return statement in function");
}

  final public ProbFormBoolConstant BoolConstant() throws ParseException {
    if (jj_2_54(3)) {
      jj_consume_token(24);
{if ("" != null) return new ProbFormBoolConstant(true);}
    } else if (jj_2_55(3)) {
      jj_consume_token(25);
{if ("" != null) return new ProbFormBoolConstant(false);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public ProbFormBool BoolNegation() throws ParseException, RBNIllegalArgumentException {ProbFormBool pfb;
    jj_consume_token(26);
    pfb = BoolFormula();
pfb.toggleSign();
  {if ("" != null) return pfb;}
    throw new Error("Missing return statement in function");
}

  final public ProbFormMacroCall MacroCall() throws ParseException, RBNIllegalArgumentException {RBNReader3.ParsedUnTypedAtom parsedat;
 RBNMacro macrodef;
    jj_consume_token(9);
    parsedat = UntypedAtom(true);
// Add the '@' back to the name:
        parsedat.set_relname("@"+parsedat.rel().name());
        switch(parseno){
                case 1:
                        {if ("" != null) return null;}
                        break;
                case 2:
                        macrodef = reader.getMacroDef(parsedat.rel());
                        if (macrodef != null)
                        {if ("" != null) return new ProbFormMacroCall(macrodef,parsedat.args());}
          else {if (true) throw new ParseException("Macro @" + parsedat.rel().name.name + " undefined");}
                }
    throw new Error("Missing return statement in function");
}

  final public CatModelSoftMax CatSoftMax() throws ParseException, RBNIllegalArgumentException {Vector<ProbForm> pflist;
    jj_consume_token(SOFTMAX);
    pflist = ProbFormList();
switch(parseno){
        case 1:
                {if ("" != null) return null;}
                break;
        case 2:
             {if ("" != null) return new CatModelSoftMax(pflist);}
        }
    throw new Error("Missing return statement in function");
}

  final public List<Rel> AttrList() throws ParseException, RBNIllegalArgumentException {ArrayList<Rel> attrs = new ArrayList<>();
    String attr;
    Token tk;
    RBNReader3.ParsedTypedAtom parsedat;
    Rel r;
    tk = jj_consume_token(Name);
r = reader.getRelFromSignature(tk.image);
        attrs.add(r);
    label_9:
    while (true) {
      if (jj_2_56(3)) {
        ;
      } else {
        break label_9;
      }
      jj_consume_token(14);
      tk = jj_consume_token(Name);
r = reader.getRelFromSignature(tk.image);
            attrs.add(r);
    }
{if ("" != null) return attrs;}
    throw new Error("Missing return statement in function");
}

  final public ArrayList<Pair<BoolRel, ArrayList<Rel>>> ForInputList() throws ParseException, RBNIllegalArgumentException {ArrayList<Pair<BoolRel, ArrayList<Rel>>> inputs = new ArrayList<>();
    List<Rel> attrs;
    RBNReader3.ParsedTypedAtom parsedat;
    Token tk;
    Rel r;
    attrs = AttrList();
    jj_consume_token(27);
    tk = jj_consume_token(Name);
r = reader.getRelFromSignature(tk.image);
        inputs.add(new Pair(r, attrs));
    label_10:
    while (true) {
      if (jj_2_57(3)) {
        ;
      } else {
        break label_10;
      }
      jj_consume_token(14);
      attrs = AttrList();
      jj_consume_token(27);
      tk = jj_consume_token(Name);
r = reader.getRelFromSignature(tk.image);
            inputs.add(new Pair(r, attrs));
    }
{if ("" != null) return inputs;}
    throw new Error("Missing return statement in function");
}

  final public String PathDec() throws ParseException {Token tok;
    jj_consume_token(15);
    tok = jj_consume_token(Path);
    jj_consume_token(16);
{if ("" != null) return tok.image;}
    throw new Error("Missing return statement in function");
}

  final public TorchInputRels CombinationTorchRels() throws ParseException, RBNIllegalArgumentException {Token tok;
  Vector<ProbForm> pflist;
  Vector<String> arglist = new Vector<String>();
  ProbForm[] pfarr;
  ProbFormBool cc = new ProbFormBoolConstant(true);
    jj_consume_token(COMBCOMB);
    pflist = ProbFormList();
    jj_consume_token(USINGTORCH);
    if (jj_2_58(3)) {
      jj_consume_token(COMBFORALL);
      arglist = ArgList();
      jj_consume_token(COMBWHERE);
      cc = BoolFormula();
    } else {
      ;
    }
switch(parseno){
            case 1:
                {if ("" != null) return null;}
                break;
            case 2:
                pfarr = new ProbForm[pflist.size()];
                for (int i=0;i<pfarr.length;i++)
                    pfarr[i]=pflist.elementAt(i);
                {if ("" != null) return new TorchInputRels(pfarr,StringOps.stringVectorToArray(arglist),cc);}
        }
    throw new Error("Missing return statement in function");
}

  final public CatGnn CatGnn() throws ParseException, RBNIllegalArgumentException {Token tk1;
    Token tk2;
    Vector<String> freeVals;
    String configPath;
    int numVals = 1;
    List<TorchInputSpecs> forInputs = new ArrayList<>();;
    List<Rel> attrs;
    Rel attrRel;
    BoolRel edgeRel;
    List<TorchInputRels> combineClauses = new ArrayList<>();
    TorchInputRels pf;
    jj_consume_token(COMPUTEWITHTORCH);
    configPath = PathDec();
    jj_consume_token(WithNumValues);
    tk1 = jj_consume_token(NonNegNumber);
numVals = Integer.parseInt(tk1.image);
    jj_consume_token(ForFreeVars);
    freeVals = UntypedArguments();
    label_11:
    while (true) {
      jj_consume_token(ATTR);
      tk1 = jj_consume_token(Name);
      jj_consume_token(19);
      jj_consume_token(X);
      jj_consume_token(19);
      attrs = AttrList();
      jj_consume_token(EDGE);
      jj_consume_token(19);
      tk2 = jj_consume_token(Name);
attrRel = reader.getRelFromSignature(tk1.image);
            edgeRel = (BoolRel) reader.getRelFromSignature(tk2.image);
            TorchInputSpecs tis = new TorchInputSpecs(attrRel, attrs, edgeRel);
            forInputs.add(tis);
      if (jj_2_59(3)) {
        ;
      } else {
        break label_11;
      }
    }
    pf = CombinationTorchRels();
combineClauses.add(pf);
    label_12:
    while (true) {
      if (jj_2_60(3)) {
        ;
      } else {
        break label_12;
      }
      jj_consume_token(14);
      pf = CombinationTorchRels();
combineClauses.add(pf);
    }
switch(parseno)
        {
        case 1:
            {if ("" != null) return null;}
            break;
        case 2:
            {if ("" != null) return new CatGnn(configPath, freeVals, numVals, forInputs, combineClauses, true);}
        }
    throw new Error("Missing return statement in function");
}

//TOKEN: {<Constant:  (<MINUS>)?  (<Digits> | "."<Digits> | <Digits> "."<Digits> | <Digits> ".")>
//}

// Java functions
  final public 
void setReader(RBNReader3 rdr) throws ParseException {
reader = rdr;
}

  final public void setParseno(int pn) throws ParseException {
parseno = pn;
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_20()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_21()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_22()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_23()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_24()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_25()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_26()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_27()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_28()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_29()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_30()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_31()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_32()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_33()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_34()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_35()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_36()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_37()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_38()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_39()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_40()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_41()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_42()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_43()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_44()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_45()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_46()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_47()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_48()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_49()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_50()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_51()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_52()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_53()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_54()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_55()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_56()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_57()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_58()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_59()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_60()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_3R_CombinationFuncClassic_369_9_29()
 {
    if (jj_scan_token(CombinationFunction)) return true;
    if (jj_scan_token(20)) return true;
    if (jj_3R_ProbFormList_484_9_41()) return true;
    if (jj_scan_token(21)) return true;
    if (jj_3R_ArgList_171_10_33()) return true;
    if (jj_scan_token(19)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    return false;
  }

  private boolean jj_3_59()
 {
    if (jj_scan_token(ATTR)) return true;
    if (jj_scan_token(Name)) return true;
    if (jj_scan_token(19)) return true;
    return false;
  }

  private boolean jj_3_49()
 {
    if (jj_scan_token(Name)) return true;
    return false;
  }

  private boolean jj_3_52()
 {
    if (jj_scan_token(23)) return true;
    if (jj_3R_BoolFormula_495_5_21()) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_scan_token(14)) return true;
    if (jj_scan_token(Name)) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_scan_token(Name)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ArgList_171_10_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_3R_CombinationFuncProd_421_9_32()) return true;
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_3R_CombinationFuncSum_448_9_31()) return true;
    return false;
  }

  private boolean jj_3R_BoolAnd_552_9_58()
 {
    if (jj_scan_token(12)) return true;
    if (jj_3R_BoolFormula_495_5_21()) return true;
    Token xsp;
    if (jj_3_52()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_52()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(13)) return true;
    return false;
  }

  private boolean jj_3R_CatGnn_743_5_17()
 {
    if (jj_scan_token(COMPUTEWITHTORCH)) return true;
    if (jj_3R_PathDec_695_9_47()) return true;
    return false;
  }

  private boolean jj_3R_CombinationFunc_351_11_49()
 {
    if (jj_3R_CombinationFuncProd_421_9_32()) return true;
    return false;
  }

  private boolean jj_3R_UntypedArguments_161_9_54()
 {
    if (jj_scan_token(12)) return true;
    if (jj_3R_ArgList_171_10_33()) return true;
    if (jj_scan_token(13)) return true;
    return false;
  }

  private boolean jj_3R_CombinationFunc_350_11_48()
 {
    if (jj_3R_CombinationFuncSum_448_9_31()) return true;
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_3R_CombinationFuncCherry_395_9_30()) return true;
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_3R_CombinationFuncClassic_369_9_29()) return true;
    return false;
  }

  private boolean jj_3R_CombinationFunc_348_9_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3R_CombinationFunc_350_11_48()) {
    jj_scanpos = xsp;
    if (jj_3R_CombinationFunc_351_11_49()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_CatGnn_743_5_17()) return true;
    return false;
  }

  private boolean jj_3_48()
 {
    if (jj_3R_UntypedAtom_132_9_37()) return true;
    return false;
  }

  private boolean jj_3R_BoolCatEquality_531_9_36()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) return true;
    }
    if (jj_scan_token(10)) return true;
    xsp = jj_scanpos;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) return true;
    }
    return false;
  }

  private boolean jj_3R_TypedAtom_146_9_40()
 {
    if (jj_scan_token(Name)) return true;
    if (jj_3R_TypedArguments_188_9_55()) return true;
    return false;
  }

  private boolean jj_3R_ConvCombinationCherry_332_9_28()
 {
    if (jj_scan_token(WIFWIF)) return true;
    if (jj_3R_ProbForm_113_9_16()) return true;
    if (jj_scan_token(WIFTHEN)) return true;
    if (jj_3R_ProbForm_113_9_16()) return true;
    if (jj_scan_token(WIFELSE)) return true;
    if (jj_3R_ProbForm_113_9_16()) return true;
    return false;
  }

  private boolean jj_3R_BoolEquality_521_9_57()
 {
    if (jj_scan_token(Name)) return true;
    if (jj_scan_token(10)) return true;
    if (jj_scan_token(Name)) return true;
    return false;
  }

  private boolean jj_3_58()
 {
    if (jj_scan_token(COMBFORALL)) return true;
    if (jj_3R_ArgList_171_10_33()) return true;
    if (jj_scan_token(COMBWHERE)) return true;
    if (jj_3R_BoolFormula_495_5_21()) return true;
    return false;
  }

  private boolean jj_3R_CombinationTorchRels_708_9_39()
 {
    if (jj_scan_token(COMBCOMB)) return true;
    if (jj_3R_ProbFormList_484_9_41()) return true;
    if (jj_scan_token(USINGTORCH)) return true;
    return false;
  }

  private boolean jj_3R_UntypedAtom_132_9_37()
 {
    if (jj_scan_token(Name)) return true;
    if (jj_3R_UntypedArguments_161_9_54()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_ProbForm_113_9_16()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_CombinationFunc_348_9_20()) return true;
    return false;
  }

  private boolean jj_3R_BoolAtom_510_9_56()
 {
    if (jj_3R_UntypedAtom_132_9_37()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_ConvCombination_296_9_19()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_Atom_263_9_18()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(Name)) return true;
    if (jj_scan_token(10)) return true;
    if (jj_3R_Atom_263_9_18()) return true;
    return false;
  }

  private boolean jj_3_45()
 {
    if (jj_scan_token(12)) return true;
    if (jj_3R_BoolFormula_495_5_21()) return true;
    if (jj_scan_token(21)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_Atom_263_9_18()) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  private boolean jj_3_44()
 {
    if (jj_scan_token(12)) return true;
    if (jj_3R_BoolFormula_495_5_21()) return true;
    if (jj_scan_token(23)) return true;
    return false;
  }

  private boolean jj_3R_PathDec_695_9_47()
 {
    if (jj_scan_token(15)) return true;
    if (jj_scan_token(Path)) return true;
    return false;
  }

  private boolean jj_3R_ConvCombinationClassic_313_9_27()
 {
    if (jj_scan_token(12)) return true;
    if (jj_3R_ProbForm_113_9_16()) return true;
    if (jj_scan_token(19)) return true;
    if (jj_3R_ProbForm_113_9_16()) return true;
    if (jj_scan_token(14)) return true;
    if (jj_3R_ProbForm_113_9_16()) return true;
    if (jj_scan_token(13)) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_Constant_225_9_23()) return true;
    return false;
  }

  private boolean jj_3_42()
 {
    if (jj_scan_token(Name)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_3R_MacroCall_604_9_22()) return true;
    return false;
  }

  private boolean jj_3_41()
 {
    if (jj_scan_token(Name)) return true;
    if (jj_scan_token(12)) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_BoolFormula_495_5_21()) return true;
    return false;
  }

  private boolean jj_3R_ProbForm_117_11_46()
 {
    if (jj_3R_CombinationFunc_348_9_20()) return true;
    return false;
  }

  private boolean jj_3R_ProbForm_116_11_45()
 {
    if (jj_3R_ConvCombination_296_9_19()) return true;
    return false;
  }

  private boolean jj_3R_ProbForm_115_11_44()
 {
    if (jj_3R_Atom_263_9_18()) return true;
    return false;
  }

  private boolean jj_3_47()
 {
    if (jj_3R_BoolCatEquality_531_9_36()) return true;
    return false;
  }

  private boolean jj_3R_ProbForm_114_11_43()
 {
    if (jj_3R_BoolCatEquality_531_9_36()) return true;
    return false;
  }

  private boolean jj_3_46()
 {
    if (jj_3R_BoolConstant_582_9_35()) return true;
    return false;
  }

  private boolean jj_3R_BoolFormula_499_7_53()
 {
    if (jj_3R_BoolOr_567_9_59()) return true;
    return false;
  }

  private boolean jj_3R_ProbForm_113_11_42()
 {
    if (jj_3R_BoolCatEquality_531_9_36()) return true;
    return false;
  }

  private boolean jj_3R_BoolFormula_498_7_52()
 {
    if (jj_3R_BoolAnd_552_9_58()) return true;
    return false;
  }

  private boolean jj_3R_ProbForm_113_9_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ProbForm_113_11_42()) {
    jj_scanpos = xsp;
    if (jj_3R_ProbForm_114_11_43()) {
    jj_scanpos = xsp;
    if (jj_3R_ProbForm_115_11_44()) {
    jj_scanpos = xsp;
    if (jj_3R_ProbForm_116_11_45()) {
    jj_scanpos = xsp;
    if (jj_3R_ProbForm_117_11_46()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_43()
 {
    if (jj_3R_BoolNegation_592_3_34()) return true;
    return false;
  }

  private boolean jj_3R_BoolFormula_496_7_51()
 {
    if (jj_3R_BoolEquality_521_9_57()) return true;
    return false;
  }

  private boolean jj_3R_BoolFormula_495_7_50()
 {
    if (jj_3R_BoolAtom_510_9_56()) return true;
    return false;
  }

  private boolean jj_3R_BoolFormula_495_5_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_BoolFormula_495_7_50()) {
    jj_scanpos = xsp;
    if (jj_3R_BoolFormula_496_7_51()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3R_BoolFormula_498_7_52()) {
    jj_scanpos = xsp;
    if (jj_3R_BoolFormula_499_7_53()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_3R_ConvCombinationCherry_332_9_28()) return true;
    return false;
  }

  private boolean jj_3_57()
 {
    if (jj_scan_token(14)) return true;
    if (jj_3R_AttrList_647_5_38()) return true;
    if (jj_scan_token(27)) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_3R_ConvCombinationClassic_313_9_27()) return true;
    return false;
  }

  private boolean jj_3R_ConvCombination_296_9_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    }
    return false;
  }

  private boolean jj_3_39()
 {
    if (jj_scan_token(14)) return true;
    if (jj_3R_ProbForm_113_9_16()) return true;
    return false;
  }

  private boolean jj_3_40()
 {
    if (jj_3R_ProbForm_113_9_16()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_39()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ProbFormList_484_9_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_CatSoftMax_627_6_15()) return true;
    return false;
  }

  private boolean jj_3R_ProbRelDefinition_91_9_14()
 {
    if (jj_3R_TypedAtom_146_9_40()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_ProbRelDefinition_91_9_14()) return true;
    return false;
  }

  private boolean jj_3_56()
 {
    if (jj_scan_token(14)) return true;
    if (jj_scan_token(Name)) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_ProbForm_113_9_16()) return true;
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_ProbForm_113_9_16()) return true;
    return false;
  }

  private boolean jj_3R_MacroDefinition_73_9_13()
 {
    if (jj_scan_token(9)) return true;
    if (jj_3R_TypedAtom_146_9_40()) return true;
    return false;
  }

  private boolean jj_3_38()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) return true;
    }
    return false;
  }

  private boolean jj_3R_Atom_263_9_18()
 {
    if (jj_3R_UntypedAtom_132_9_37()) return true;
    return false;
  }

  private boolean jj_3R_AttrList_647_5_38()
 {
    if (jj_scan_token(Name)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_CombinationFuncSum_448_9_31()
 {
    if (jj_scan_token(12)) return true;
    if (jj_3R_ProbForm_113_9_16()) return true;
    Token xsp;
    if (jj_3_38()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_38()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(13)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) return true;
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_MacroDefinition_73_9_13()) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_3R_Parameter_247_9_26()) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_scan_token(18)) return true;
    if (jj_scan_token(Name)) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_scan_token(17)) return true;
    if (jj_scan_token(Name)) return true;
    return false;
  }

  private boolean jj_3R_Parameter_247_9_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) return true;
    }
    return false;
  }

  private boolean jj_3R_CatSoftMax_627_6_15()
 {
    if (jj_scan_token(SOFTMAX)) return true;
    if (jj_3R_ProbFormList_484_9_41()) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_scan_token(NonNegNumber)) return true;
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_scan_token(MULT)) return true;
    if (jj_3R_ProbForm_113_9_16()) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_scan_token(NonNegNumber)) return true;
    return false;
  }

  private boolean jj_3R_NumericConstant_234_9_25()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) return true;
    }
    return false;
  }

  private boolean jj_3R_CombinationFuncProd_421_9_32()
 {
    if (jj_scan_token(12)) return true;
    if (jj_3R_ProbForm_113_9_16()) return true;
    Token xsp;
    if (jj_3_35()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_35()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(13)) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_NumericConstant_234_9_25()) return true;
    return false;
  }

  private boolean jj_3_51()
 {
    if (jj_scan_token(Name)) return true;
    return false;
  }

  private boolean jj_3R_Constant_225_9_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    return false;
  }

  private boolean jj_3R_MacroCall_604_9_22()
 {
    if (jj_scan_token(9)) return true;
    if (jj_3R_UntypedAtom_132_9_37()) return true;
    return false;
  }

  private boolean jj_3R_TypeDeclaration_216_9_24()
 {
    if (jj_scan_token(15)) return true;
    if (jj_scan_token(Name)) return true;
    if (jj_scan_token(16)) return true;
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_scan_token(COMBFORALL)) return true;
    if (jj_3R_ArgList_171_10_33()) return true;
    if (jj_scan_token(COMBWHERE)) return true;
    if (jj_3R_BoolFormula_495_5_21()) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_TypeDeclaration_216_9_24()) return true;
    return false;
  }

  private boolean jj_3R_BoolNegation_592_3_34()
 {
    if (jj_scan_token(26)) return true;
    if (jj_3R_BoolFormula_495_5_21()) return true;
    return false;
  }

  private boolean jj_3R_CombinationFuncCherry_395_9_30()
 {
    if (jj_scan_token(COMBCOMB)) return true;
    if (jj_3R_ProbFormList_484_9_41()) return true;
    if (jj_scan_token(COMBWITH)) return true;
    if (jj_scan_token(CombinationFunction)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_55()
 {
    if (jj_scan_token(25)) return true;
    return false;
  }

  private boolean jj_3_54()
 {
    if (jj_scan_token(24)) return true;
    return false;
  }

  private boolean jj_3R_BoolConstant_582_9_35()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3_55()) return true;
    }
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_scan_token(14)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    if (jj_scan_token(Name)) return true;
    return false;
  }

  private boolean jj_3_50()
 {
    if (jj_3R_UntypedAtom_132_9_37()) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_TypeDeclaration_216_9_24()) return true;
    return false;
  }

  private boolean jj_3_60()
 {
    if (jj_scan_token(14)) return true;
    if (jj_3R_CombinationTorchRels_708_9_39()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    if (jj_scan_token(Name)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_53()
 {
    if (jj_scan_token(21)) return true;
    if (jj_3R_BoolFormula_495_5_21()) return true;
    return false;
  }

  private boolean jj_3R_TypedArguments_188_9_55()
 {
    if (jj_scan_token(12)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    return false;
  }

  private boolean jj_3R_BoolOr_567_9_59()
 {
    if (jj_scan_token(12)) return true;
    if (jj_3R_BoolFormula_495_5_21()) return true;
    Token xsp;
    if (jj_3_53()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_53()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(13)) return true;
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_3R_BoolFormula_495_5_21()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public RBNParser3TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[60];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public RBNParser3(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RBNParser3(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new RBNParser3TokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 0; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public RBNParser3(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new RBNParser3TokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new RBNParser3TokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public RBNParser3(RBNParser3TokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(RBNParser3TokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[54];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 0; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 54; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 60; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			   case 14: jj_3_15(); break;
			   case 15: jj_3_16(); break;
			   case 16: jj_3_17(); break;
			   case 17: jj_3_18(); break;
			   case 18: jj_3_19(); break;
			   case 19: jj_3_20(); break;
			   case 20: jj_3_21(); break;
			   case 21: jj_3_22(); break;
			   case 22: jj_3_23(); break;
			   case 23: jj_3_24(); break;
			   case 24: jj_3_25(); break;
			   case 25: jj_3_26(); break;
			   case 26: jj_3_27(); break;
			   case 27: jj_3_28(); break;
			   case 28: jj_3_29(); break;
			   case 29: jj_3_30(); break;
			   case 30: jj_3_31(); break;
			   case 31: jj_3_32(); break;
			   case 32: jj_3_33(); break;
			   case 33: jj_3_34(); break;
			   case 34: jj_3_35(); break;
			   case 35: jj_3_36(); break;
			   case 36: jj_3_37(); break;
			   case 37: jj_3_38(); break;
			   case 38: jj_3_39(); break;
			   case 39: jj_3_40(); break;
			   case 40: jj_3_41(); break;
			   case 41: jj_3_42(); break;
			   case 42: jj_3_43(); break;
			   case 43: jj_3_44(); break;
			   case 44: jj_3_45(); break;
			   case 45: jj_3_46(); break;
			   case 46: jj_3_47(); break;
			   case 47: jj_3_48(); break;
			   case 48: jj_3_49(); break;
			   case 49: jj_3_50(); break;
			   case 50: jj_3_51(); break;
			   case 51: jj_3_52(); break;
			   case 52: jj_3_53(); break;
			   case 53: jj_3_54(); break;
			   case 54: jj_3_55(); break;
			   case 55: jj_3_56(); break;
			   case 56: jj_3_57(); break;
			   case 57: jj_3_58(); break;
			   case 58: jj_3_59(); break;
			   case 59: jj_3_60(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}



options {
      STATIC = false ;
      FORCE_LA_CHECK = true;
	DEBUG_PARSER = false;
	DEBUG_LOOKAHEAD = false;
//DEBUG_TOKEN_MANAGER = true;
//	LOOKAHEAD = 3;
}


PARSER_BEGIN(RBNParser2)

package RBNio;

import RBNpackage.*;
import java.util.*;
import myio.StringOps;
import RBNExceptions.RBNSyntaxException;

public class RBNParser2{
	private int parseno = 1;
	private RBNReader2 reader;

}


PARSER_END(RBNParser2)


SKIP:{" " | "\t" | <EOLtoken:<EOL>>} // ignores blank spaces, tabs and end of lines

SKIP :
{
  "%" : WithinComment
}

<WithinComment> SKIP :
{
  "\n": DEFAULT
}
<WithinComment> SKIP :
{
  "\r\n": DEFAULT
}
<WithinComment> SKIP :
{
  "\r": DEFAULT
}

<WithinComment> MORE :
{
  <~[]>
}



void ReadRBN():
{}
{// grammar
	( MacroDefinition() | ProbRelDefinition() )+
}


void MacroDefinition():
{RBNReader2.ParsedTypedAtom parsedat;
 ProbForm parsedprobform;
}
{// grammar
	"@" parsedat = TypedAtom() "=" parsedprobform = ProbForm() ";"
	{switch  (parseno){
	case 1:
		reader.addMacroDefined(reader.new ProbRelDef(parsedat,null));
		break;
	case 2: 
		reader.setMacroPF(parsedat.rel(),parsedprobform);
	}
	}
}

void ProbRelDefinition():
{RBNReader2.ParsedTypedAtom parsedat;
 ProbForm parsedprobform;
}
{// grammar
	parsedat = TypedAtom() "=" parsedprobform = ProbForm() ";"
	{switch  (parseno){
		case 1:
			reader.addProbRelDefined(reader.new ProbRelDef(parsedat,null));
			break;
		case 2: 
		reader.setProbRelPF(parsedat.rel(),parsedprobform);
	}
	}
}

ProbForm ProbForm():
{ProbForm parsedpf;
}
{// grammar
	( parsedpf=Constant() 
	| LOOKAHEAD(Atom()) parsedpf=Atom() 
//	| LOOKAHEAD( "(" ProbForm() ":") parsedpf=ConvCombination() 
	| LOOKAHEAD(ConvCombination()) parsedpf=ConvCombination() 
	| LOOKAHEAD(CombinationFunc()) parsedpf=CombinationFunc() 
	| parsedpf=BoolFormula() 
	| parsedpf=MacroCall() 
	)
	{return parsedpf;}
}

RBNReader2.ParsedUnTypedAtom  UntypedAtom():
{ 
  Vector<String> args;
  Token tok;
  Rel rel;
}
{// grammar
	tok = <Name> args = UntypedArguments()
	{rel = new Rel(tok.image,args.size());
	 return reader.new ParsedUnTypedAtom(rel,args);
	}
}

RBNReader2.ParsedTypedAtom TypedAtom():
{
	Token tok;
	RBNReader2.ParsedTypedArguments args;
	BoolRel rel;
	int arity;
	String relname;
}
{// grammar
    {System.out.println("typed atom");}
	tok=<Name>
		{relname = tok.image;
       System.out.println("name: " + relname);}
	args = TypedArguments()
	{arity = args.arity();
	 rel = new BoolRel(relname,arity,args.types());
	 return  reader.new ParsedTypedAtom(rel,args);
	}
	
}



Vector<String> UntypedArguments():
{Vector<String> parsedargs;
}
{// grammar
	"(" parsedargs = ArgList() ")"
	{return parsedargs;}
}


Vector<String> ArgList():
{Vector<String> parsedargs = new Vector<String>();
 Token tok;
}
{// grammar
	 ( tok = <Name> 
		{parsedargs.add(tok.image);}
	 ("," tok = <Name>
		{parsedargs.add(tok.image);}
	 )*  )? 
	{return parsedargs;}
}


RBNReader2.ParsedTypedArguments TypedArguments():
{
	Token tok;
	Vector<String> args = new Vector<String>();
	Vector<Type> types = new Vector<Type>();
	String typename = null;
}
{// grammar
	"(" 
	( (typename = TypeDeclaration())?
		{ if (typename != null)
			{types.add(new TypeRel(typename));
			 typename = null;
			}
		  else {types.add(new TypeDomain());System.out.println("added domain type");}
		}
	tok=<Name>
		{args.add(tok.image);}
	( "," (typename = TypeDeclaration())?
		{ if (typename != null)
			{types.add(new TypeRel(typename));
			 typename = null;
			}
		  else {types.add(new TypeDomain());System.out.println("added domain type");}
		}
	tok=<Name>
		{args.add(tok.image);}
	)* 
	) ? 
	")"
	{return reader.new ParsedTypedArguments(types,args);}
}

String TypeDeclaration():
{Token tok;}
{// grammar
	"[" tok = <Name> "]"
	{return tok.image;}
}


ProbForm Constant():
{ProbForm parsedpf;
}
{// grammar
	(parsedpf=NumericConstant() | parsedpf=Parameter())
	{return parsedpf;}
}

ProbFormConstant NumericConstant():
{ProbFormConstant parsedpfconst;
 Token tok;
}
{// grammar
	tok = <Constant>
	{parsedpfconst = new ProbFormConstant(Double.parseDouble(tok.image));
	 return parsedpfconst;
	}
}

ProbFormConstant  Parameter():
{ProbFormConstant parsedpfconst;
 Token tok;}
{// grammar
	"#" tok = <Name>
	{return new ProbFormConstant("#" + tok.image);}
}

ProbForm Atom():
{
 ProbFormAtom parsedpfatom;
 RBNReader2.ParsedUnTypedAtom parsedutat;
 Rel parsedrel;
 Rel oldrel;	
}
{// grammar
	parsedutat = UntypedAtom()
	{
	switch(parseno){
	case 1: 
		reader.addAllRel(parsedutat.rel());
		return null;
		break;
	case 2: 
	 	parsedrel = parsedutat.rel();
                // first need to look into reader.probrelsdefined in order 
		// to ensure that the relation associated with the atom 
		// is of type probabilistic
         	oldrel = reader.getProbRel(parsedrel);
                // if the following case triggers, then the relation
		// associated with the atom will be predefined
		if (oldrel == null)
		    oldrel = reader.getAllRel(parsedrel);
		return new ProbFormAtom(oldrel,StringOps.stringVectorToArray(parsedutat.args()));
//	 	if (oldrel != null)
//		   return new ProbFormAtom(oldrel,StringOps.stringVectorToArray(parsedutat.args()));
//	 	else {
//		     oldrel = reader.getAllRel(parsedrel);
//		     return new ProbFormBoolAtom(oldrel,StringOps.stringVectorToArray(parsedutat.args()),true);
//		     }
	}
	}
}


ProbFormConvComb ConvCombination():
{ProbFormConvComb pf;
}
{
	( pf = ConvCombinationClassic()
	| pf = ConvCombinationCherry()
	)
	{switch(parseno){
	case 1: 
		return null;
		break;
	case 2: return pf;
	}}	
}

ProbFormConvComb ConvCombinationClassic():
{ProbForm pf1;
 ProbForm pf2;
 ProbForm pf3;
}
{// grammar
	"(" pf1 = ProbForm() {if (parseno==2) System.out.println("type of pf1 : " + pf1.getClass().getName());}
        ":" pf2 = ProbForm() {if (parseno==2) System.out.println("type of pf2 : " + pf2.getClass().getName());}
        "," pf3 = ProbForm() {if (parseno==2) System.out.println("type of pf3 : " + pf3.getClass().getName());}
        ")"
	{switch(parseno){
	case 1: 
		return null;
		break;
	case 2: return new ProbFormConvComb(pf1,pf2,pf3);
	}
	}
}

ProbFormConvComb ConvCombinationCherry():
{ProbForm pf1;
 ProbForm pf2;
 ProbForm pf3;
}
{// grammar
	<WIFWIF>  pf1 = ProbForm() <WIFTHEN> pf2 = ProbForm() <WIFELSE> pf3 = ProbForm() 
	{switch(parseno){
	case 1: 
		return null;
		break;
	case 2: return new ProbFormConvComb(pf1,pf2,pf3);
	}
	}
}



ProbFormCombFunc CombinationFunc():
{ProbFormCombFunc pf;
}
{
	( pf = CombinationFuncClassic()
	| pf = CombinationFuncCherry()
	| pf = CombinationFuncSum()
	| pf = CombinationFuncProd()
	)
	{switch(parseno){
	case 1: 
		return null;
		break;
	case 2: return pf;
	}}	
}

ProbFormCombFunc CombinationFuncClassic():
{ Token tok;
  Vector<ProbForm> pflist;
  Vector<String> arglist;
  ProbForm[] pfarr;
  ProbFormBool cc = new ProbFormBoolConstant(true);
}
{// grammar
	tok = <CombinationFunction> "{" 
	pflist = ProbFormList() "|" 
	arglist = ArgList() ":" 
	(cc=BoolFormula())? "}"
	
	{switch(parseno){
	case 1: 
		return null;
		break;
	case 2: 
	 pfarr = new ProbForm[pflist.size()];
	 for (int i=0;i<pfarr.length;i++)
		pfarr[i]=pflist.elementAt(i);
	return new ProbFormCombFunc(tok.image,pfarr,StringOps.stringVectorToArray(arglist),cc);}
	}
}


ProbFormCombFunc CombinationFuncCherry():
{ Token tok;
  Vector<ProbForm> pflist;
  Vector<String> arglist;
  ProbForm[] pfarr;
  ProbFormBool cc = new ProbFormBoolConstant(true);
}
{// grammar
	<COMBCOMB>
	pflist = ProbFormList()
	<COMBWITH>
	tok = <CombinationFunction> 
	<COMBFORALL>
	arglist = ArgList()  
	(<COMBWHERE> cc=BoolFormula())? 
	
	{switch(parseno){
	case 1: 
		return null;
		break;
	case 2: 
	 pfarr = new ProbForm[pflist.size()];
	 for (int i=0;i<pfarr.length;i++)
		pfarr[i]=pflist.elementAt(i);
	return new ProbFormCombFunc(tok.image,pfarr,StringOps.stringVectorToArray(arglist),cc);}
	}
}

ProbFormCombFunc CombinationFuncProd(): 
{Vector<ProbForm> pflist = new Vector<ProbForm>();
ProbForm nextpf;
}
{// grammar
    	"("
	nextpf = ProbForm()
	{pflist.add(nextpfb);}
	(
	  <MULT> nextpf = ProbForm()
	   {pflist.add(nextpf)}
	)+
	")"
	{switch(parseno){
	case 1: 
		return null;
		break;
	case 2: 
	 pfarr = new ProbForm[pflist.size()];
	 for (int i=0;i<pfarr.length;i++)
		pfarr[i]=pflist.elementAt(i);
	return new ProbFormCombFunc("prod",pfarr,new String[0],null);}
	}	
}


ProbFormCombFunc CombinationFuncSum(): 
{Vector<ProbForm> pflist = new Vector<ProbForm>();
ProbForm nextpf;
}
{// grammar
    	"("
	nextpf = ProbForm()
	{pflist.add(nextpfb);}
	(
	  <PLUS> nextpf = ProbForm()
	   {pflist.add(nextpf)}
	)+
	")"
	{switch(parseno){
	case 1: 
		return null;
		break;
	case 2: 
	 pfarr = new ProbForm[pflist.size()];
	 for (int i=0;i<pfarr.length;i++)
		pfarr[i]=pflist.elementAt(i);
	return new ProbFormCombFunc("sum",pfarr,new String[0],null);}
	}	
}


Vector<ProbForm> ProbFormList():
{Vector<ProbForm> pflist = new Vector<ProbForm>();
 ProbForm nextpf;
}
{// grammar
	( nextpf = ProbForm()
	  {pflist.add(nextpf);} 
	("," nextpf = ProbForm() 
	  {pflist.add(nextpf);} 
	)*  )? 
	{return pflist;}
}

ProbFormBool BoolFormula():
{ProbFormBool pf;}
{// grammar
    ( LOOKAHEAD(<Name> "(") pf = BoolAtom()}
    | LOOKAHEAD(<Name> "=")  pf = BoolEquality()}
    | pf = BoolNegation() 
    | LOOKAHEAD( "(" BoolFormula() "&"  )pf = BoolAnd() 
    | LOOKAHEAD( "(" BoolFormula() "|"  )pf = BoolOr() 
    | pf = BoolConstant() 
    )
    {return pf;}
}

ProbFormBoolAtom BoolAtom():
{RBNReader2.ParsedUnTypedAtom parsedat;
}
{// grammar
	parsedat = UntypedAtom()
	{return new ProbFormBoolAtom(parsedat.rel(),StringOps.stringVectorToArray(parsedat.args()),true);}
}


ProbFormBoolEquality BoolEquality():
{
 Token tok1;
 Token tok2;
}
{// grammar
	tok1= <Name> "=" tok2 = <Name>
	{return new ProbFormBoolEquality(tok1.image,tok2.image,true);}
}

ProbFormBoolComposite BoolAnd():
{Vector<ProbFormBool> comps=new Vector<ProbFormBool>() ;
ProbFormBool nextpfb;}
{//grammar
	"("
	nextpfb = BoolFormula()
	{comps.add(nextpfb);}
	(
	  "&" 	nextpfb = BoolFormula()
	   {comps.add(nextpfb);}
	)+
	")"	
{return new ProbFormBoolComposite(comps,ProbFormBool.OPERATORAND,true);}
}

ProbFormBoolComposite BoolOr():
{Vector<ProbFormBool> comps=new Vector<ProbFormBool>();
ProbFormBool nextpfb;}
{//grammar
	"("
	nextpfb = BoolFormula()
	{comps.add(nextpfb);System.out.println("parsed" + nextpfb.asString(0,0,null));}
	(
	  "|" 	nextpfb = BoolFormula()
	   {comps.add(nextpfb);System.out.println("parsed" + nextpfb.asString(0,0,null));}
	)+
	")"	
{return new ProbFormBoolComposite(comps,ProbFormBool.OPERATOROR,true);}
}


ProbFormBoolConstant BoolConstant():
{}
{ //grammar
	("true" {return new ProbFormBoolConstant(true);}
	|
	"false" {return new ProbFormBoolConstant(false);}
	)
}


ProbFormBool BoolNegation():
{ProbFormBool pfb;}
{ //grammar
  "~" pfb = BoolFormula()
  {pfb.toggleSign(); 
  return pfb;}
} 


ProbForm MacroCall():
{
 RBNReader2.ParsedUnTypedAtom parsedat;
 RBNReader2.ProbRelDef macrodef;
}
{// grammar
	"@" parsedat =  UntypedAtom()
	{	
	switch(parseno){
		case 1: 
			return null;
			break;
		case 2: 
	  		macrodef = reader.getMacroDef(parsedat.rel());
	  		if (macrodef != null)
			return macrodef.pf().substitute(StringOps.stringVectorToArray(macrodef.args()),StringOps.stringVectorToArray(parsedat.args()));
	  else throw new ParseException("Macro @" + parsedat.rel().name.name + " undefined");	
		}
	}
	
}



TOKEN:{
	<EOL: "\n" | "\r" | "\r\n">
}


TOKEN:{
	<CombinationFunction: "n-or"|"mean"|"esum"|"invsum"|"l-reg"|"ll-reg"|"sum" >
}

TOKEN:{ 
	<WIFWIF: "WIF" | "wif" | "Wif" >
}

TOKEN:{ 
	<WIFTHEN: "THEN" | "then" | "Then" >
}

TOKEN:{ 
	<WIFELSE: "ELSE" | "else" | "Else" >
}

TOKEN:{ 
	<COMBCOMB: "COMBINE" | "combine" | "Combine" >
}

TOKEN:{ 
	<COMBWITH: "WITH" | "with" | "With" >
}

TOKEN:{ 
	<COMBFORALL: "FORALL" | "forall" | "Forall" >
}

TOKEN:{ 
	<COMBWHERE: "WHERE" | "where" | "Where" >
}





TOKEN:{ 
	<MULT: "*" >
}
TOKEN:{ 
	<PLUS: "+" >
}


//TOKEN: {<ProbabilityValue: ("0"|"1") ("." (["0"-"9"])*)? 
//			   | "." (["0"-"9"])+ >
//}

TOKEN: {<#Digits: (["0"-"9"])+>
} 

//TOKEN: {<#NonNegNumber: <Digits> | "."<Digits> | <Digits> "."<Digits> | <Digits> ".">
//}

TOKEN: {<Constant:  ("-")?  (<Digits> | "."<Digits> | <Digits> "."<Digits> | <Digits> ".")>
}

TOKEN:{
	<Name: ["a"-"z","A"-"Z"] (["a"-"z", "A"-"Z","0"-"9","-", "_" ])* >
}




// Java functions

void setReader(RBNReader2 rdr):
{}
{
	{reader = rdr;}
}

void setParseno(int pn):
{}
{
	{parseno = pn;}
}

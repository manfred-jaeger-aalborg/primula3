/* Generated By:JavaCC: Do not edit this line. RBNParser2.java */
package RBNio;

import RBNpackage.*;
import java.util.*;
import myio.StringOps;
import RBNExceptions.RBNSyntaxException;

public class RBNParser2 implements RBNParser2Constants {
        private int parseno = 1;
        private RBNReader2 reader;

  final public void ReadRBN() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        MacroDefinition();
        break;
      case Name:
        ProbRelDefinition();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
      case Name:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
  }

  final public void MacroDefinition() throws ParseException {
 RBNReader2.ParsedTypedAtom parsedat;
 ProbForm parsedprobform;
    jj_consume_token(9);
    parsedat = TypedAtom();
    jj_consume_token(10);
    parsedprobform = ProbForm();
    jj_consume_token(11);
         switch  (parseno){
        case 1:
                reader.addMacroDefined(reader.new ProbRelDef(parsedat,null));
                break;
        case 2:
                reader.setMacroPF(parsedat.rel(),parsedprobform);
        }
  }

  final public void ProbRelDefinition() throws ParseException {
 RBNReader2.ParsedTypedAtom parsedat;
 ProbForm parsedprobform;
    // grammar
            parsedat = TypedAtom();
    jj_consume_token(10);
    parsedprobform = ProbForm();
    jj_consume_token(11);
         switch  (parseno){
                case 1:
                        reader.addProbRelDefined(reader.new ProbRelDef(parsedat,null));
                        break;
                case 2:
                reader.setProbRelPF(parsedat.rel(),parsedprobform);
        }
  }

  final public ProbForm ProbForm() throws ParseException {
 ProbForm parsedpf;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
    case Constant:
      parsedpf = Constant();
      break;
    default:
      jj_la1[2] = jj_gen;
      if (jj_2_1(2147483647)) {
        parsedpf = Atom();
      } else if (jj_2_2(2147483647)) {
        parsedpf = ConvCombination();
      } else if (jj_2_3(2147483647)) {
        parsedpf = CombinationFunc();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 12:
        case 23:
        case 24:
        case 25:
        case Name:
          parsedpf = BoolFormula();
          break;
        case 9:
          parsedpf = MacroCall();
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
         {if (true) return parsedpf;}
    throw new Error("Missing return statement in function");
  }

  final public RBNReader2.ParsedUnTypedAtom UntypedAtom() throws ParseException {
  Vector<String> args;
  Token tok;
  Rel rel;
    // grammar
            tok = jj_consume_token(Name);
    args = UntypedArguments();
         rel = new Rel(tok.image,args.size());
         {if (true) return reader.new ParsedUnTypedAtom(rel,args);}
    throw new Error("Missing return statement in function");
  }

  final public RBNReader2.ParsedTypedAtom TypedAtom() throws ParseException {
        Token tok;
        RBNReader2.ParsedTypedArguments args;
        BoolRel rel;
        int arity;
        String relname;
    // grammar
            tok = jj_consume_token(Name);
         relname = tok.image;
    args = TypedArguments();
         arity = args.arity();
         rel = new BoolRel(relname,arity,args.types());
         {if (true) return  reader.new ParsedTypedAtom(rel,args);}
    throw new Error("Missing return statement in function");
  }

  final public Vector<String> UntypedArguments() throws ParseException {
 Vector<String> parsedargs;
    jj_consume_token(12);
    parsedargs = ArgList();
    jj_consume_token(13);
         {if (true) return parsedargs;}
    throw new Error("Missing return statement in function");
  }

  final public Vector<String> ArgList() throws ParseException {
 Vector<String> parsedargs = new Vector<String>();
 Token tok;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Name:
      tok = jj_consume_token(Name);
                 parsedargs.add(tok.image);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 14:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        jj_consume_token(14);
        tok = jj_consume_token(Name);
                 parsedargs.add(tok.image);
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
         {if (true) return parsedargs;}
    throw new Error("Missing return statement in function");
  }

  final public RBNReader2.ParsedTypedArguments TypedArguments() throws ParseException {
        Token tok;
        Vector<String> args = new Vector<String>();
        Vector<Type> types = new Vector<Type>();
        String typename = null;
    jj_consume_token(12);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
    case Name:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 15:
        typename = TypeDeclaration();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
                  if (typename != null)
                        {types.add(new TypeRel(typename));
                         typename = null;
                        }
                  else {types.add(new TypeDomain());}
      tok = jj_consume_token(Name);
                 args.add(tok.image);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 14:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_3;
        }
        jj_consume_token(14);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 15:
          typename = TypeDeclaration();
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
                  if (typename != null)
                        {types.add(new TypeRel(typename));
                         typename = null;
                        }
                  else {types.add(new TypeDomain());}
        tok = jj_consume_token(Name);
                 args.add(tok.image);
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(13);
         {if (true) return reader.new ParsedTypedArguments(types,args);}
    throw new Error("Missing return statement in function");
  }

  final public String TypeDeclaration() throws ParseException {
 Token tok;
    jj_consume_token(15);
    tok = jj_consume_token(Name);
    jj_consume_token(16);
         {if (true) return tok.image;}
    throw new Error("Missing return statement in function");
  }

  final public ProbForm Constant() throws ParseException {
 ProbForm parsedpf;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Constant:
      parsedpf = NumericConstant();
      break;
    case 17:
      parsedpf = Parameter();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return parsedpf;}
    throw new Error("Missing return statement in function");
  }

  final public ProbFormConstant NumericConstant() throws ParseException {
 ProbFormConstant parsedpfconst;
 Token tok;
    // grammar
            tok = jj_consume_token(Constant);
         parsedpfconst = new ProbFormConstant(Double.parseDouble(tok.image));
         {if (true) return parsedpfconst;}
    throw new Error("Missing return statement in function");
  }

  final public ProbFormConstant Parameter() throws ParseException {
 ProbFormConstant parsedpfconst;
 Token tok;
    jj_consume_token(17);
    tok = jj_consume_token(Name);
         {if (true) return new ProbFormConstant("#" + tok.image);}
    throw new Error("Missing return statement in function");
  }

  final public ProbForm Atom() throws ParseException {
 ProbFormAtom parsedpfatom;
 RBNReader2.ParsedUnTypedAtom parsedutat;
 Rel parsedrel;
 Rel oldrel;
    // grammar
            parsedutat = UntypedAtom();
        switch(parseno){
        case 1:
                reader.addAllRel(parsedutat.rel());
                {if (true) return null;}
                break;
        case 2:
                parsedrel = parsedutat.rel();
                // first need to look into reader.probrelsdefined in order 
                // to ensure that the relation associated with the atom 
                // is of type probabilistic
                oldrel = reader.getProbRel(parsedrel);
                // if the following case triggers, then the relation
                // associated with the atom will be predefined
                if (oldrel == null)
                    oldrel = reader.getAllRel(parsedrel);
                {if (true) return new ProbFormAtom(oldrel,StringOps.stringVectorToArray(parsedutat.args()));}
//	 	if (oldrel != null)
//		   return new ProbFormAtom(oldrel,StringOps.stringVectorToArray(parsedutat.args()));
//	 	else {
//		     oldrel = reader.getAllRel(parsedrel);
//		     return new ProbFormBoolAtom(oldrel,StringOps.stringVectorToArray(parsedutat.args()),true);
//		     }
        }
    throw new Error("Missing return statement in function");
  }

  final public ProbFormConvComb ConvCombination() throws ParseException {
 ProbFormConvComb pf;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
      pf = ConvCombinationClassic();
      break;
    case WIFWIF:
      pf = ConvCombinationCherry();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         switch(parseno){
        case 1:
                {if (true) return null;}
                break;
        case 2: {if (true) return pf;}
        }
    throw new Error("Missing return statement in function");
  }

  final public ProbFormConvComb ConvCombinationClassic() throws ParseException {
 ProbForm pf1;
 ProbForm pf2;
 ProbForm pf3;
    jj_consume_token(12);
    pf1 = ProbForm();
    jj_consume_token(18);
    pf2 = ProbForm();
    jj_consume_token(14);
    pf3 = ProbForm();
    jj_consume_token(13);
         switch(parseno){
        case 1:
                {if (true) return null;}
                break;
        case 2: {if (true) return new ProbFormConvComb(pf1,pf2,pf3);}
        }
    throw new Error("Missing return statement in function");
  }

  final public ProbFormConvComb ConvCombinationCherry() throws ParseException {
 ProbForm pf1;
 ProbForm pf2;
 ProbForm pf3;
    jj_consume_token(WIFWIF);
    pf1 = ProbForm();
    jj_consume_token(WIFTHEN);
    pf2 = ProbForm();
    jj_consume_token(WIFELSE);
    pf3 = ProbForm();
         switch(parseno){
        case 1:
                {if (true) return null;}
                break;
        case 2: {if (true) return new ProbFormConvComb(pf1,pf2,pf3);}
        }
    throw new Error("Missing return statement in function");
  }

  final public ProbFormCombFunc CombinationFunc() throws ParseException {
 ProbFormCombFunc pf;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CombinationFunction:
      pf = CombinationFuncClassic();
      break;
    case COMBCOMB:
      pf = CombinationFuncCherry();
      break;
    default:
      jj_la1[12] = jj_gen;
      if (jj_2_4(2147483647)) {
        pf = CombinationFuncSum();
      } else if (jj_2_5(2147483647)) {
        pf = CombinationFuncProd();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         switch(parseno){
        case 1:
                {if (true) return null;}
                break;
        case 2: {if (true) return pf;}
        }
    throw new Error("Missing return statement in function");
  }

  final public ProbFormCombFunc CombinationFuncClassic() throws ParseException {
  Token tok;
  Vector<ProbForm> pflist;
  Vector<String> arglist;
  ProbForm[] pfarr;
  ProbFormBool cc = new ProbFormBoolConstant(true);
    // grammar
            tok = jj_consume_token(CombinationFunction);
    jj_consume_token(19);
    pflist = ProbFormList();
    jj_consume_token(20);
    arglist = ArgList();
    jj_consume_token(18);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
    case 23:
    case 24:
    case 25:
    case Name:
      cc = BoolFormula();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(21);
         switch(parseno){
        case 1:
                {if (true) return null;}
                break;
        case 2:
         pfarr = new ProbForm[pflist.size()];
         for (int i=0;i<pfarr.length;i++)
                pfarr[i]=pflist.elementAt(i);
        {if (true) return new ProbFormCombFunc(tok.image,pfarr,StringOps.stringVectorToArray(arglist),cc);}}
    throw new Error("Missing return statement in function");
  }

  final public ProbFormCombFunc CombinationFuncCherry() throws ParseException {
  Token tok;
  Vector<ProbForm> pflist;
  Vector<String> arglist;
  ProbForm[] pfarr;
  ProbFormBool cc = new ProbFormBoolConstant(true);
    jj_consume_token(COMBCOMB);
    pflist = ProbFormList();
    jj_consume_token(COMBWITH);
    tok = jj_consume_token(CombinationFunction);
    jj_consume_token(COMBFORALL);
    arglist = ArgList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMBWHERE:
      jj_consume_token(COMBWHERE);
      cc = BoolFormula();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
         switch(parseno){
        case 1:
                {if (true) return null;}
                break;
        case 2:
         pfarr = new ProbForm[pflist.size()];
         for (int i=0;i<pfarr.length;i++)
                pfarr[i]=pflist.elementAt(i);
        {if (true) return new ProbFormCombFunc(tok.image,pfarr,StringOps.stringVectorToArray(arglist),cc);}}
    throw new Error("Missing return statement in function");
  }

  final public ProbFormCombFunc CombinationFuncProd() throws ParseException {
 Vector<ProbForm> pflist = new Vector<ProbForm>();
ProbForm nextpf;
ProbForm[] pfarr;
    jj_consume_token(12);
    nextpf = ProbForm();
         pflist.add(nextpf);
    label_4:
    while (true) {
      jj_consume_token(MULT);
      nextpf = ProbForm();
            pflist.add(nextpf);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_4;
      }
    }
    jj_consume_token(13);
         switch(parseno){
        case 1:
                {if (true) return null;}
                break;
        case 2:
         pfarr = new ProbForm[pflist.size()];
         for (int i=0;i<pfarr.length;i++)
                pfarr[i]=pflist.elementAt(i);
        {if (true) return new ProbFormCombFunc("prod",pfarr,new String[0],new ProbFormBoolConstant(true));}}
    throw new Error("Missing return statement in function");
  }

  final public ProbFormCombFunc CombinationFuncSum() throws ParseException {
 Vector<ProbForm> pflist = new Vector<ProbForm>();
ProbForm nextpf;
ProbForm[] pfarr;
    jj_consume_token(12);
    nextpf = ProbForm();
         pflist.add(nextpf);
    label_5:
    while (true) {
      jj_consume_token(PLUS);
      nextpf = ProbForm();
            pflist.add(nextpf);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_5;
      }
    }
    jj_consume_token(13);
         switch(parseno){
        case 1:
                {if (true) return null;}
                break;
        case 2:
         pfarr = new ProbForm[pflist.size()];
         for (int i=0;i<pfarr.length;i++)
                pfarr[i]=pflist.elementAt(i);
        {if (true) return new ProbFormCombFunc("sum",pfarr,new String[0],new ProbFormBoolConstant(true));}}
    throw new Error("Missing return statement in function");
  }

  final public Vector<ProbForm> ProbFormList() throws ParseException {
 Vector<ProbForm> pflist = new Vector<ProbForm>();
 ProbForm nextpf;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 9:
    case 12:
    case 17:
    case 23:
    case 24:
    case 25:
    case CombinationFunction:
    case WIFWIF:
    case COMBCOMB:
    case Constant:
    case Name:
      nextpf = ProbForm();
           pflist.add(nextpf);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 14:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_6;
        }
        jj_consume_token(14);
        nextpf = ProbForm();
           pflist.add(nextpf);
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
         {if (true) return pflist;}
    throw new Error("Missing return statement in function");
  }

  final public ProbFormBool BoolFormula() throws ParseException {
 ProbFormBool pf;
    if (jj_2_6(2147483647)) {
      pf = BoolAtom();
    } else if (jj_2_7(2147483647)) {
      pf = BoolEquality();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
        pf = BoolNegation();
        break;
      default:
        jj_la1[19] = jj_gen;
        if (jj_2_8(2147483647)) {
          pf = BoolAnd();
        } else if (jj_2_9(2147483647)) {
          pf = BoolOr();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 23:
          case 24:
            pf = BoolConstant();
            break;
          default:
            jj_la1[20] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
     {if (true) return pf;}
    throw new Error("Missing return statement in function");
  }

  final public ProbFormBoolAtom BoolAtom() throws ParseException {
 RBNReader2.ParsedUnTypedAtom parsedat;
    // grammar
            parsedat = UntypedAtom();
         {if (true) return new ProbFormBoolAtom(parsedat.rel(),StringOps.stringVectorToArray(parsedat.args()),true);}
    throw new Error("Missing return statement in function");
  }

  final public ProbFormBoolEquality BoolEquality() throws ParseException {
 Token tok1;
 Token tok2;
    // grammar
            tok1 = jj_consume_token(Name);
    jj_consume_token(10);
    tok2 = jj_consume_token(Name);
         {if (true) return new ProbFormBoolEquality(tok1.image,tok2.image,true);}
    throw new Error("Missing return statement in function");
  }

  final public ProbFormBoolComposite BoolAnd() throws ParseException {
 Vector<ProbFormBool> comps=new Vector<ProbFormBool>() ;
ProbFormBool nextpfb;
    jj_consume_token(12);
    nextpfb = BoolFormula();
         comps.add(nextpfb);
    label_7:
    while (true) {
      jj_consume_token(22);
      nextpfb = BoolFormula();
            comps.add(nextpfb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 22:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_7;
      }
    }
    jj_consume_token(13);
 {if (true) return new ProbFormBoolComposite(comps,ProbFormBool.OPERATORAND,true);}
    throw new Error("Missing return statement in function");
  }

  final public ProbFormBoolComposite BoolOr() throws ParseException {
 Vector<ProbFormBool> comps=new Vector<ProbFormBool>();
ProbFormBool nextpfb;
    jj_consume_token(12);
    nextpfb = BoolFormula();
         comps.add(nextpfb);
    label_8:
    while (true) {
      jj_consume_token(20);
      nextpfb = BoolFormula();
            comps.add(nextpfb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_8;
      }
    }
    jj_consume_token(13);
 {if (true) return new ProbFormBoolComposite(comps,ProbFormBool.OPERATOROR,true);}
    throw new Error("Missing return statement in function");
  }

  final public ProbFormBoolConstant BoolConstant() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 23:
      jj_consume_token(23);
                 {if (true) return new ProbFormBoolConstant(true);}
      break;
    case 24:
      jj_consume_token(24);
                 {if (true) return new ProbFormBoolConstant(false);}
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ProbFormBool BoolNegation() throws ParseException {
 ProbFormBool pfb;
    jj_consume_token(25);
    pfb = BoolFormula();
   pfb.toggleSign();
  {if (true) return pfb;}
    throw new Error("Missing return statement in function");
  }

  final public ProbForm MacroCall() throws ParseException {
 RBNReader2.ParsedUnTypedAtom parsedat;
 RBNReader2.ProbRelDef macrodef;
    jj_consume_token(9);
    parsedat = UntypedAtom();
        switch(parseno){
                case 1:
                        {if (true) return null;}
                        break;
                case 2:
                        macrodef = reader.getMacroDef(parsedat.rel());
                        if (macrodef != null)
                        {if (true) return macrodef.pf().substitute(StringOps.stringVectorToArray(macrodef.args()),StringOps.stringVectorToArray(parsedat.args()));}
          else {if (true) throw new ParseException("Macro @" + parsedat.rel().name.name + " undefined");}
                }
    throw new Error("Missing return statement in function");
  }

// Java functions
  final public void setReader(RBNReader2 rdr) throws ParseException {
         reader = rdr;
  }

  final public void setParseno(int pn) throws ParseException {
         parseno = pn;
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(14)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_63()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(9)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(14)) return true;
    if (jj_scan_token(Name)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(Name)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_62()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(CombinationFunction)) return true;
    if (jj_scan_token(19)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(20)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(18)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(25)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(24)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(23)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(12)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(13)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(12)) return true;
    if (jj_3R_22()) return true;
    Token xsp;
    if (jj_3R_23()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_23()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(13)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(20)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(17)) return true;
    if (jj_scan_token(Name)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(12)) return true;
    if (jj_3R_14()) return true;
    Token xsp;
    if (jj_3R_55()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_55()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(13)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(Constant)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(22)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(WIFWIF)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(WIFTHEN)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(WIFELSE)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(MULT)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(12)) return true;
    if (jj_3R_14()) return true;
    Token xsp;
    if (jj_3R_54()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(13)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(Name)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(12)) return true;
    if (jj_3R_22()) return true;
    Token xsp;
    if (jj_3R_24()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(13)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(Name)) return true;
    if (jj_scan_token(10)) return true;
    if (jj_scan_token(Name)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(12)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(18)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(14)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(13)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(12)) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(20)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(COMBWHERE)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(12)) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(22)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(Name)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(Name)) return true;
    if (jj_scan_token(12)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(COMBCOMB)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(COMBWITH)) return true;
    if (jj_scan_token(CombinationFunction)) return true;
    if (jj_scan_token(COMBFORALL)) return true;
    if (jj_3R_48()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_42()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public RBNParser2TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,0x200,0x20000,0x3801200,0x4000,0x0,0x8000,0x4000,0x8000,0x8000,0x20000,0x10001000,0x88000000,0x3801000,0x0,0x0,0x0,0x4000,0x9b821200,0x2000000,0x1800000,0x400000,0x100000,0x1800000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x80,0x80,0x40,0x80,0x0,0x80,0x0,0x0,0x0,0x80,0x40,0x0,0x0,0x80,0x4,0x8,0x10,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[9];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public RBNParser2(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RBNParser2(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RBNParser2TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public RBNParser2(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RBNParser2TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public RBNParser2(RBNParser2TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(RBNParser2TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[40];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

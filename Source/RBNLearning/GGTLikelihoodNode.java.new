/*
* GGLikelihoodNode.java 
* 
* Copyright (C) 2009 Aalborg University
*
* contact:
* jaeger@cs.aau.dk   http://www.cs.aau.dk/~jaeger/Primula.html
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*/

package RBNLearning;

import java.util.*;
import java.io.*;
import RBNpackage.*;
import RBNgui.*;
import RBNExceptions.*;
import RBNutilities.*;
import RBNinference.*;
import myio.StringOps;

public  class GGTLikelihoodNode extends GGTNode{


	

	private Hashtable<Rel,GGTTableNode> MapAtoms;
	private Hashtable<Rel,GGTTableNode> DataAtoms;
	private Hashtable<Rel,GGTTableNode> SumAtoms;
	
	/** The current (likelihood) value represented 
	 * as a pair of doubles to be handled by class SmallDouble
	 */ 
	double[] likelihood;

//	/** Likelihood values for all samples, at current parameter settings */
//	double[][] samplelikelihoods;
	
	/** The sum of likelihoods for a current set of samples */
	private double[] likelihoodsum;

	/** Used instead of the standard gradient vector in GGNode class --
	 * for the likelihood node need gradient as small doubles!*/
	private double[][] smallgradient;

	/** The sum of gradients for a current set of samples. Array of small doubles */
	private double[][] gradientsum;

	/** True if the current likelihood values represent the the correct
	 * values for the current settings of parameter and instantiation
	 * values. isEvaluated=false corresponds to value=null for other
	 * GGNode's
	 */
	private boolean isEvaluated;

	/* Upper and lower bounds as small doubles on the value of this node given
	 * a current partial evaluation.
	 * Set to [-1,-1] if these bounds have not been evaluated
	 * for the current setting at the indicator nodes
	 */
	double[][] bounds;


	public GGTLikelihoodNode(GradientGraphT gg){
		super(gg);
		MapAtoms = new Hashtable<Rel,GGTTableNode>();
		DataAtoms = new Hashtable<Rel, GGTTableNode>();
		SumAtoms = new Hashtable<Rel, GGTTableNode>();
		
		likelihood = new double[2];
		likelihoodsum = new double[2];

		isEvaluated = false;
		bounds = new double[2][2];
	}

	public void initllgrads(int k){
		smallgradient = new double[k][2];
		gradientsum = new double[k][2];
	}

	/** Computes the likelihood (ignoring those terms that are not dependent
	 * on unknown atoms or parameters)
	 * 
	 * Returns the likelihood[0] component. 
	 * 
	 * THE RETURN VALUE IS MEANINGLESS! (it is there only for compatibility
	 * with other subclasses of GGNode, where evaluate returns 
	 * a meaningful double value).  
	 */
	public double evaluate(){
		return 0;
	}

//	public void evaluateBounds(){
//		if (bounds[0][0]==-1){
//			//	    System.out.println("likelihoodnode.evaluateBounds");
//			/* Evaluate bounds at children: */
//			for (int i=0;i<children.size();i++)
//				children.elementAt(i).evaluateBounds();
//			double lowbound[] = {1,0};
//			double uppbound[] = {1,0};
//			for (int i=0;i<children.size();i++){
//				if (getInstVal(i)==1){
//					lowbound= SmallDouble.multiply(lowbound,children.elementAt(i).lowerBound());
//					uppbound= SmallDouble.multiply(uppbound,children.elementAt(i).upperBound());
//				}
//				else{
//					lowbound= SmallDouble.multiply(lowbound,(1-children.elementAt(i).upperBound()));
//					uppbound= SmallDouble.multiply(uppbound,(1-children.elementAt(i).lowerBound()));					}
//			}
//			bounds[0]=lowbound;
//			bounds[1]=uppbound;
//		}
//	}



//
//	public void evaluateGradients(){
//		for (int i=0;i<smallgradient.length;i++){
//			smallgradient[i]=evaluateSmallGrad(i);
//		}
//	}



//	private double[] evaluateSmallGrad(int param){
//		if (!isEvaluated){
//			this.evaluate();
//		}
//		
//		double[] relevantlikelihood;
//
//		relevantlikelihood = likelihood.clone();
//		double smallgrad[] = {0,0};
//		if (relevantlikelihood[0]!=0){
//			for (int i=0;i<children.size();i++){
//				if (children.elementAt(i).dependsOn(param)){
//					if (getInstVal(i)==1)
//						smallgrad = SmallDouble.add(smallgrad,
//								SmallDouble.multiply(SmallDouble.divide(relevantlikelihood,
//										children.elementAt(i).value()),
//										children.elementAt(i).evaluateGrad(param)
//								));
//					else smallgrad = SmallDouble.subtract(smallgrad,
//							SmallDouble.multiply(SmallDouble.divide(relevantlikelihood,
//									1-children.elementAt(i).value()),
//									children.elementAt(i).evaluateGrad(param)
//									));
//				}
//				if (Double.isNaN(smallgrad[0]) || Double.isInfinite(smallgrad[0])){
//
//					String message = "Param: "+ thisgg.parameterAt(param)+  
//							"   relevantlik: " + StringOps.arrayToString(relevantlikelihood,"[","]");
//
//					if (getInstVal(i)==1) message = message + "   value: "+ children.elementAt(i).value() ;
//					else {double messval = 1-children.elementAt(i).value() ;
//					message = message + "   1-value: "+ messval;}
//					message = message +  "   childgrad: " + children.elementAt(i).evaluateGrad(param);
//					System.out.println(message);
//				}
//			}
//		}
//		else {
//			System.out.println("likelihood[0]=0 in evaluateSmallGrad");
//		}
//
//		return smallgrad;	    
//	}


//	private int getInstVal(int i){
//		Object ival = children.elementAt(i).getInstval();
//		if (ival instanceof Integer)
//			return (Integer)ival;
//		else{
//			if (((GGAtomNode)ival).getCurrentInst()==-1)
//				System.out.println("Illegal instantiation value!");
//			return ((GGAtomNode)ival).getCurrentInst();
//		}
//	}

	public double[] gradientsumAsDouble(){
		return SmallDouble.toStandardDoubleArray(gradientsum);
	}
	
	public double[] gradientsumAsDouble(int partial){
		double[] result = SmallDouble.toStandardDoubleArray(gradientsum);
		for (int i=0;i<result.length;i++)
			if (i!=partial)
				result[i]=0;
		return result;
	}

	
	public double[] gradientAsDouble(){
		return SmallDouble.toStandardDoubleArray(smallgradient);
	}

	/** Returns the gradient (scaled to fit double precision) 
	 * with all components where zeros[i]=1 set to 0
	 * 
	 * Corresponds to taking partial derivatives, ignoring
	 * parameters with index i.
	 * 
	 * @param zeros
	 * @return
	 */ 
	public double[] gradientAsDouble(int partial){
		double[] result = SmallDouble.toStandardDoubleArray(smallgradient);
		for (int i=0;i<result.length;i++)
			if (i!=partial)
				result[i]=0;
		return result;
	}

	
//	public void initSampleLikelihoods(int size){
//		samplelikelihoods = new double[size][2];
//	}

	public double[] likelihood(){
		return likelihood.clone();
	}

	public double[] likelihoodsum(){
		return likelihoodsum.clone();
	}


	public double[] lowerBound(){
		return bounds[0].clone();
	}

	public double[] upperBound(){
		return bounds[1].clone();
	}

	/** The name of this node. The name identifies the function represented
	 * by a node. 
	 */
	public String name(){
		return "Likelihood";
	}

//	public String name(RelStruc A){
//		return name();
//	}

	public int numChildren(){
		return children.size();
	}

//	public void resetValue(){
//		value = null;
//		likelihood[0]=0;
//		likelihood[1]=0;
//		isEvaluated = false;
//	}

	public void resetLikelihoodSum(){
		likelihoodsum[0] = 0;
		likelihoodsum[1] = 0;
	}

	public void resetGradientSum(){
		for (int i=0;i<gradientsum.length;i++){
			gradientsum[i][0]=0.0;
			gradientsum[i][1]=0.0;
		}
	}

	public void resetBounds(){
		bounds[0][0]=-1;
		bounds[0][1]=-1;
		bounds[1][0]=-1;
		bounds[1][1]=-1;

	}

	/** updates the likelihoodsum field by adding value
	 */
	public void updateLikelihoodSum(){
		//System.out.print("add " + StringOps.arrayToString(likelihoodsum) + " " + StringOps.arrayToString(likelihood));
		likelihoodsum=SmallDouble.add(likelihoodsum,likelihood);
		//System.out.println(" is " + StringOps.arrayToString(likelihoodsum));
	}

	public void updateGradSum(){
		for (int i=0; i<gradientsum.length; i++){
			gradientsum[i]=SmallDouble.add(gradientsum[i],smallgradient[i]);
		}
	}
	
	public double[][] getSmallgradient(){
		return smallgradient;
	}
	
	public GGTTableNode getMaxTable(Rel r){
		return MapAtoms.get(r);
	}
	
	public void addMaxTable(GGTTableNode tn, Rel r){
		MapAtoms.put(r,tn);
	}
	public GGTTableNode getDataTable(Rel r){
		return DataAtoms.get(r);
	}
	
	public void addDataTable(GGTTableNode tn, Rel r){
		DataAtoms.put(r,tn);
	}

	public void showTables(){
		GGTTableNode nextggtt;
		
		System.out.println("DataTables:");
		for (Enumeration<GGTTableNode> e = DataAtoms.elements(); e.hasMoreElements();){
			nextggtt = e.nextElement();
			nextggtt.print();
		}
	}
}
